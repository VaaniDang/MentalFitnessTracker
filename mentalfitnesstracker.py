# -*- coding: utf-8 -*-
"""MentalFitnessTracker_VaaniDang.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ZaHvWZFPh_Enj0Kdm7NsJlGePEHjQ93
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

from google.colab import drive
drive.mount('/content/drive')

df2=pd.read_csv("mental-and-substance-use-as-share-of-disease -AI.csv")
df1=pd.read_csv("prevalence-by-mental-and-substance-use-disorder _AI.csv")

df1.head()

df2.head(10)

data=pd.merge(df1,df2)
data.head(10)

data.isnull().sum()

data.drop('Code',axis=1,inplace=True)

data.head(10)

data.size,data.shape

data.set_axis(['Country','Year','Schizophrenia','Bipolar_Disorder','Eating_disorder','Anxiety','Drug_usage','depression','alcohol','mental_fitness'],axis='columns',inplace=True)

data.head(10)

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='Reds')
plt.plot()

sns.pairplot(data,corner=True)
plt.show()

mean=data['mental_fitness'].mean()
mean

fig=px.pie(data,values='mental_fitness',names='Year')
fig.show()

fig=px.line(data,x="Year",y="mental_fitness",color='Country',markers=True,color_discrete_sequence=['red','blue'],template='plotly_dark')
fig.show()

df=data.copy()

df.info()

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df.columns:
    if df[i].dtype=='object':
        df[i]=l.fit_transform(df[i])

df.shape

X=df.drop('mental_fitness',axis=1)
y=df['mental_fitness']
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size=0.20,random_state=2)

print("xtrain: ",xtrain.shape)
print("xtest: ",xtest.shape)
print("\nytrain: ",ytrain.shape)
print("ytest: ",ytest.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
lr=LinearRegression()
lr.fit(xtrain,ytrain)
y_pred=lr.predict(xtest)
mse=mean_squared_error(ytest,y_pred)
rmse=(np.sqrt(mean_squared_error(ytest,y_pred)))
r2=r2_score(ytest,y_pred)
print("The Linear Regression model performance for training set")
print("--------------------------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain,ytrain)
y_pred2=rf.predict(xtest)
mse_2=mean_squared_error(ytest,y_pred2)
rmse_2=(np.sqrt(mean_squared_error(ytest,y_pred2)))
r2_2=r2_score(ytest,y_pred2)
print("The Random Forest Regressor model performance for training set")
print("--------------------------------------------------------")
print('MSE is {}'.format(mse_2))
print('RMSE is {}'.format(rmse_2))
print('R2 score is {}'.format(r2_2))

from sklearn.tree import DecisionTreeRegressor

Decision_Tree=DecisionTreeRegressor()
Decision_Tree.fit(xtrain,ytrain)
y_pred3=Decision_Tree.predict(xtest)
mse_3=mean_squared_error(ytest,y_pred3)
rmse_3=(np.sqrt(mean_squared_error(ytest,y_pred3)))
r2_3=r2_score(ytest,y_pred3)
print("The Decision Tree Regressor model performance for training set")
print("--------------------------------------------------------")
print('MSE is {}'.format(mse_3))
print('RMSE is {}'.format(rmse_3))
print('R2 score is {}'.format(r2_3))

models = ['Linear Regression', 'Decision Tree', 'Random Forest']
mse_scores = [mse, mse_2, mse_3]
rmse_scores = [rmse, rmse_2, rmse_3]
r2_scores = [r2, r2_2, r2_3]

fig, ax = plt.subplots(figsize=(10, 6))
x = np.arange(len(models))

bar_width = 0.2
bar1 = ax.bar(x - bar_width, mse_scores, bar_width, label='MSE')
bar2 = ax.bar(x, rmse_scores, bar_width, label='RMSE')
bar3 = ax.bar(x + bar_width, r2_scores, bar_width, label='R2 Score')

ax.set_xlabel('Models')
ax.set_ylabel('Scores')
ax.set_title('Comparison of MSE, RMSE, and R2 Score for Three Models')
ax.set_xticks(x)
ax.set_xticklabels(models)
ax.legend()

plt.tight_layout()
plt.show()